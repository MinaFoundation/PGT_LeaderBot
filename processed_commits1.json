{
     "2024-04-29": [
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-29T16:52:07Z",
               "message": "ADD string for message",
               "sha": "94f79d4689ebdde3b48ec672cf784fd48ad0b14c",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex c5f8680..fc77753 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -1,6 +1,6 @@\n import { runtimeModule, state, runtimeMethod, Runtime, RuntimeModule } from \"@proto-kit/module\";\n import { State, StateMap, assert } from \"@proto-kit/protocol\";\n-import { Bool, Field, Struct } from \"o1js\";\n+import { Bool, Field, Struct, CircuitString } from \"o1js\";\n \n export class Agent extends Struct({\n     agentId: Field,\n@@ -21,7 +21,7 @@ export class Agent extends Struct({\n \n export class MessageDetail extends Struct({\n     agent: Agent,\n-    message: Field,\n+    message: String,\n }) {\n     \n }\n@@ -31,10 +31,11 @@ export class Message extends Struct({\n     messageDetails: MessageDetail\n }) {\n     public isValid(): Bool {\n-        const a = this.messageDetails.message.greaterThan(99999999999)\n-        const b = this.messageDetails.message.lessThan(1000000000000)\n+        const desiredLength = new Field(12);\n+        const message = this.messageDetails.message;\n+        const len = new Field(message.length)\n \n-        return a.and(b)\n+        return len.equals(desiredLength);\n     }\n }\n \n\n diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex f62a395..3a1600d 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -1,5 +1,5 @@\n import { TestingAppChain } from \"@proto-kit/sdk\";\n-import { Field, PrivateKey, UInt64 } from \"o1js\";\n+import { Field, PrivateKey, UInt64, CircuitString } from \"o1js\";\n import { Messages, Agent, Message, MessageDetail } from \"../src/messages\";\n import { log } from \"@proto-kit/common\";\n \n@@ -23,6 +23,11 @@ describe(\"Mina Spy Chain Messages\", () => {\n     let messages: any;\n     let agents: Agent[];\n \n+    function generateMessage(input: string) {\n+        const message = input\n+        return message\n+    }\n+\n     beforeAll(async () => {\n         await appChain.start();\n \n@@ -34,7 +39,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n         messages = appChain.runtime.resolve(\"Messages\");\n     \n         agents = []\n-    \n+\n         for (let i = 1; i <= 5; i++) {\n             agents.push(new Agent({\n                 agentId: Field(i),\n@@ -66,7 +71,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n             messageNumber: Field(1),\n             messageDetails: new MessageDetail({\n                 agent: agents[0],\n-                message: Field(100000000001)\n+                message: generateMessage(\"SECRETMeSSGE\")\n             })\n         });\n     \n@@ -110,7 +115,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n             messageNumber: Field(2),\n             messageDetails: {\n                 agent: wrongSecurityAgent,\n-                message: Field(100000000001)\n+                message: generateMessage(\"ZAAAAAAAAAAA\")\n             }\n         });\n \n@@ -129,7 +134,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n             messageNumber: Field(3),\n             messageDetails: {\n                 agent: agents[0],\n-                message: Field(999)\n+                message: generateMessage(\"AAA\")\n             }\n         });\n \n@@ -149,7 +154,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n             messageNumber: Field(0), // Lower than last valid\n             messageDetails: {\n                 agent: agents[0],\n-                message: Field(120000000001)\n+                message: generateMessage(\"CCCCCCCCCCCC\")\n             }\n         });\n     \n@@ -173,7 +178,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n                     lastMessageNumber: Field(0),\n                     securityCode: Field(10)\n                 }),\n-                message: Field(100000000001)\n+                message: generateMessage(\"AAAAAAAAAAAA\")\n             }\n         });"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "Berkin G\u00fcrcan",
               "username": "berkingurcan",
               "date": "2024-04-29T16:52:31Z",
               "message": "Merge pull request #1 from berkingurcan/string-message\n\nADD string for message",
               "sha": "558c1ba6511f618d1eed0ce8d2675ddaa47fa039",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex c5f8680..fc77753 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -1,6 +1,6 @@\n import { runtimeModule, state, runtimeMethod, Runtime, RuntimeModule } from \"@proto-kit/module\";\n import { State, StateMap, assert } from \"@proto-kit/protocol\";\n-import { Bool, Field, Struct } from \"o1js\";\n+import { Bool, Field, Struct, CircuitString } from \"o1js\";\n \n export class Agent extends Struct({\n     agentId: Field,\n@@ -21,7 +21,7 @@ export class Agent extends Struct({\n \n export class MessageDetail extends Struct({\n     agent: Agent,\n-    message: Field,\n+    message: String,\n }) {\n     \n }\n@@ -31,10 +31,11 @@ export class Message extends Struct({\n     messageDetails: MessageDetail\n }) {\n     public isValid(): Bool {\n-        const a = this.messageDetails.message.greaterThan(99999999999)\n-        const b = this.messageDetails.message.lessThan(1000000000000)\n+        const desiredLength = new Field(12);\n+        const message = this.messageDetails.message;\n+        const len = new Field(message.length)\n \n-        return a.and(b)\n+        return len.equals(desiredLength);\n     }\n }\n \n\n diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex f62a395..3a1600d 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -1,5 +1,5 @@\n import { TestingAppChain } from \"@proto-kit/sdk\";\n-import { Field, PrivateKey, UInt64 } from \"o1js\";\n+import { Field, PrivateKey, UInt64, CircuitString } from \"o1js\";\n import { Messages, Agent, Message, MessageDetail } from \"../src/messages\";\n import { log } from \"@proto-kit/common\";\n \n@@ -23,6 +23,11 @@ describe(\"Mina Spy Chain Messages\", () => {\n     let messages: any;\n     let agents: Agent[];\n \n+    function generateMessage(input: string) {\n+        const message = input\n+        return message\n+    }\n+\n     beforeAll(async () => {\n         await appChain.start();\n \n@@ -34,7 +39,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n         messages = appChain.runtime.resolve(\"Messages\");\n     \n         agents = []\n-    \n+\n         for (let i = 1; i <= 5; i++) {\n             agents.push(new Agent({\n                 agentId: Field(i),\n@@ -66,7 +71,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n             messageNumber: Field(1),\n             messageDetails: new MessageDetail({\n                 agent: agents[0],\n-                message: Field(100000000001)\n+                message: generateMessage(\"SECRETMeSSGE\")\n             })\n         });\n     \n@@ -110,7 +115,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n             messageNumber: Field(2),\n             messageDetails: {\n                 agent: wrongSecurityAgent,\n-                message: Field(100000000001)\n+                message: generateMessage(\"ZAAAAAAAAAAA\")\n             }\n         });\n \n@@ -129,7 +134,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n             messageNumber: Field(3),\n             messageDetails: {\n                 agent: agents[0],\n-                message: Field(999)\n+                message: generateMessage(\"AAA\")\n             }\n         });\n \n@@ -149,7 +154,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n             messageNumber: Field(0), // Lower than last valid\n             messageDetails: {\n                 agent: agents[0],\n-                message: Field(120000000001)\n+                message: generateMessage(\"CCCCCCCCCCCC\")\n             }\n         });\n     \n@@ -173,7 +178,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n                     lastMessageNumber: Field(0),\n                     securityCode: Field(10)\n                 }),\n-                message: Field(100000000001)\n+                message: generateMessage(\"AAAAAAAAAAAA\")\n             }\n         });"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "Berkin G\u00fcrcan",
               "username": "berkingurcan",
               "date": "2024-04-29T17:54:59Z",
               "message": "Update README.md",
               "sha": "79937f5f2b9d4042e14891daa26e51cd36076e67",
               "branch": "main",
               "diff": "diff --git a/README.md b/README.md\nindex bf02f21..f3f981b 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,7 +1,11 @@\n-# Protokit starter-kit\n+# MINA NAVIGATORS L2E CHALLENGE 3\n \n-This repository is a monorepo aimed at kickstarting application chain development using the Protokit framework.\n+This repository is a solution for Mina Navigators program, learn to earn challenge 3.\n \n+## Answer to the question regarding privacy\n+This app chain is not private regarding messages, agents and their contents because all inputs and states are public. It is roughly solved by encrypting and decrypting by content and secret codes BUT it is not tricky and also we need verification of the messages. So, it is solved by benefiting zk programs, messages should go through verifiable computation on to ensure their privacy and only the proof of this computation should be transferred. By using this technique, all existing message constraints can be confirmed, and without disclosing any sensitive information, the system's state can be updated as necessary. Then we can change the application messages and their verification are private.\n+\n+ \n ## Quick start\n \n The monorepo contains 1 package and 1 app:\n@@ -21,33 +25,8 @@ The monorepo contains 1 package and 1 app:\n > `docker run -it --rm -p 3000:3000 -p 8080:8080 -v %cd%:/starter-kit -w /starter-kit gplane/pnpm:node18 bash`\n \n \n-### Setup\n-\n-```zsh\n-git clone https://github.com/proto-kit/starter-kit my-chain\n-cd my-chain\n-\n-# ensures you have the right node.js version\n-nvm use\n-pnpm install\n-```\n-\n-### Running the sequencer & UI\n-\n-```zsh\n-# starts both UI and sequencer locally\n-pnpm dev\n-\n-# starts UI only\n-pnpm dev -- --filter web\n-# starts sequencer only\n-pnpm dev -- --filter chain\n-```\n-\n ### Running tests\n ```zsh\n # run and watch tests for the `chain` package\n-pnpm run test --filter=chain -- --watchAll\n+pnpm run test\n ```\n-\n-Navigate to `localhost:3000` to see the example UI, or to `localhost:8080/graphql` to see the GQL interface of the locally running sequencer."
          }
     ],
     "2024-04-26": [
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-26T10:45:25Z",
               "message": "fix updatemessage",
               "sha": "939527caec836ec03eb94927fff4c8a86d710d67",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 8f7b549..82d2daa 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -13,6 +13,10 @@ export class Agent extends Struct({\n \n         return a.and(b)\n     }\n+\n+    public updateMessageNumber(n: Field): void {\n+        this.lastMessageNumber = n;\n+    }\n }\n \n export class MessageDetail extends Struct({\n@@ -62,6 +66,12 @@ export class Messages extends RuntimeModule<unknown>{\n         assert(this.existingAgents.get(agent.agentId).value.lastMessageNumber.lessThan(messageNumber));\n \n         // You should update the agent state to store the last message number received\n-        this.existingAgents.get(agent.agentId).value.lastMessageNumber = messageNumber;\n+        const updatedAgent = new Agent({\n+            agentId: agent.agentId,\n+            lastMessageNumber: messageNumber,\n+            securityCode: messageSecurityCode\n+        })\n+        \n+        this.existingAgents.set(agent.agentId, updatedAgent)\n     }\n }\n\\ No newline at end of file"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-26T11:27:31Z",
               "message": "add errors and tests",
               "sha": "b6f257b8bf60fa9d5753dd57f8c2965004f91705",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 82d2daa..c5f8680 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -51,11 +51,11 @@ export class Messages extends RuntimeModule<unknown>{\n     public processMessage(message: Message): any {\n         // Ensure The AgentID exists in the system\n         const agent = message.messageDetails.agent;\n-        assert(this.existingAgents.get(agent.agentId).isSome);\n+        assert(this.existingAgents.get(agent.agentId).isSome, \"AGENT IS NOT EXISTS\");\n \n         // The security code matches that held for that AgentID\n         const messageSecurityCode = agent.securityCode;\n-        assert(this.existingAgents.get(agent.agentId).value.securityCode.equals(messageSecurityCode));\n+        assert(this.existingAgents.get(agent.agentId).value.securityCode.equals(messageSecurityCode), \"INVALID SECURITY CODE!\");\n \n         // The message is of the correct length. & Security Code is a 2 Character code\n         assert(message.isValid());\n@@ -71,7 +71,7 @@ export class Messages extends RuntimeModule<unknown>{\n             lastMessageNumber: messageNumber,\n             securityCode: messageSecurityCode\n         })\n-        \n+\n         this.existingAgents.set(agent.agentId, updatedAgent)\n     }\n }\n\\ No newline at end of file\n\n diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex a6e69b1..beb207e 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -76,9 +76,47 @@ describe(\"Mina Spy Chain Messages\", () => {\n         await tx2.sign();\n         await tx2.send();\n         await appChain.produceBlock();\n-    \n+\n         const updatedAgent = await appChain.query.runtime.Messages.existingAgents.get(agents[0].agentId);\n         expect(updatedAgent?.lastMessageNumber).toEqual(Field(1));\n     });\n+\n+    let wrongSecurityAgent: any;\n+    it(\"Initialize agent with wrong security code\", async () => {\n+        wrongSecurityAgent = new Agent({\n+            agentId: agents[1].agentId,\n+            lastMessageNumber: Field(0),\n+            securityCode: Field(999) // incorrect security code\n+        });\n+\n+        const tx3 = await appChain.transaction(carrieMathison, () => {\n+            messages.initializeAgent(agents[1].agentId, wrongSecurityAgent)\n+        })\n+\n+        await tx3.sign();\n+        await tx3.send();\n+\n+        await appChain.produceBlock();\n+\n+        const wrongAgent = await appChain.query.runtime.Messages.existingAgents.get(agents[1].agentId)\n+        expect(wrongAgent?.securityCode).not.toEqual(agents[1].securityCode)\n+    })\n+\n+    it(\"Reject message with security code mismatch\", async () => {\n+        const invalidMessage = new Message({\n+            messageNumber: Field(2),\n+            messageDetails: {\n+                agent: wrongSecurityAgent,\n+                message: Field(100000000001)\n+            }\n+        });\n+\n+        const tx4 = await appChain.transaction(carrieMathison, () => {\n+            messages.processMessage(invalidMessage);\n+        });\n     \n+        await tx4.sign();\n+        await tx4.send();\n+        await appChain.produceBlock();\n+    });\n })"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-26T11:46:13Z",
               "message": "expect transactions",
               "sha": "31e640cca3c14c438e83a64deda875cdf994f3d4",
               "branch": "main",
               "diff": "diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex beb207e..9a6753d 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -52,8 +52,9 @@ describe(\"Mina Spy Chain Messages\", () => {\n         await tx1.sign();\n         await tx1.send();\n \n-        await appChain.produceBlock();\n-\n+        const block = await appChain.produceBlock();\n+        expect(block?.transactions[0].status.toBoolean()).toBe(true);\n+        \n         const agent = await appChain.query.runtime.Messages.existingAgents.get(agents[0].agentId)\n         expect(agent?.agentId).toEqual(agents[0].agentId);\n         expect(agent?.lastMessageNumber).toEqual(agents[0].lastMessageNumber);\n@@ -75,7 +76,8 @@ describe(\"Mina Spy Chain Messages\", () => {\n     \n         await tx2.sign();\n         await tx2.send();\n-        await appChain.produceBlock();\n+        const block = await appChain.produceBlock();\n+        expect(block?.transactions[0].status.toBoolean()).toBe(true);\n \n         const updatedAgent = await appChain.query.runtime.Messages.existingAgents.get(agents[0].agentId);\n         expect(updatedAgent?.lastMessageNumber).toEqual(Field(1));\n@@ -96,7 +98,8 @@ describe(\"Mina Spy Chain Messages\", () => {\n         await tx3.sign();\n         await tx3.send();\n \n-        await appChain.produceBlock();\n+        const block = await appChain.produceBlock();\n+        expect(block?.transactions[0].status.toBoolean()).toBe(true);\n \n         const wrongAgent = await appChain.query.runtime.Messages.existingAgents.get(agents[1].agentId)\n         expect(wrongAgent?.securityCode).not.toEqual(agents[1].securityCode)\n@@ -117,6 +120,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n     \n         await tx4.sign();\n         await tx4.send();\n-        await appChain.produceBlock();\n+        const block = await appChain.produceBlock();\n+        expect(block?.transactions[0].status.toBoolean()).toBe(false);\n     });\n })"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-26T11:53:17Z",
               "message": "add test case invalid length",
               "sha": "ea38ffb729c602a0f6f6d4cb4ba35953c976d56e",
               "branch": "main",
               "diff": "diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex 9a6753d..0e46bc8 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -54,7 +54,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n \n         const block = await appChain.produceBlock();\n         expect(block?.transactions[0].status.toBoolean()).toBe(true);\n-        \n+\n         const agent = await appChain.query.runtime.Messages.existingAgents.get(agents[0].agentId)\n         expect(agent?.agentId).toEqual(agents[0].agentId);\n         expect(agent?.lastMessageNumber).toEqual(agents[0].lastMessageNumber);\n@@ -88,7 +88,7 @@ describe(\"Mina Spy Chain Messages\", () => {\n         wrongSecurityAgent = new Agent({\n             agentId: agents[1].agentId,\n             lastMessageNumber: Field(0),\n-            securityCode: Field(999) // incorrect security code\n+            securityCode: Field(999)\n         });\n \n         const tx3 = await appChain.transaction(carrieMathison, () => {\n@@ -123,4 +123,25 @@ describe(\"Mina Spy Chain Messages\", () => {\n         const block = await appChain.produceBlock();\n         expect(block?.transactions[0].status.toBoolean()).toBe(false);\n     });\n+\n+    it(\"Reject message with invalid length\", async () => {\n+        const invalidLengthMessage = new Message({\n+            messageNumber: Field(3),\n+            messageDetails: {\n+                agent: agents[0],\n+                message: Field(999)\n+            }\n+        });\n+\n+        const tx5 = await appChain.transaction(carrieMathison, () => {\n+            messages.processMessage(invalidLengthMessage);\n+        });\n+\n+        await tx5.sign();\n+        await tx5.send();\n+        const block = await appChain.produceBlock();\n+\n+        expect(block?.transactions[0].status.toBoolean()).toBe(false);\n+    });\n+    \n })"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-26T12:06:38Z",
               "message": "add tests",
               "sha": "8398c328d169d7a138ecc1242f7cd1424d3bf66d",
               "branch": "main",
               "diff": "diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex 0e46bc8..f62a395 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -143,5 +143,49 @@ describe(\"Mina Spy Chain Messages\", () => {\n \n         expect(block?.transactions[0].status.toBoolean()).toBe(false);\n     });\n+\n+    it(\"Reject message with invalid sequence number\", async () => {\n+        const lowerNumberMessage = new Message({\n+            messageNumber: Field(0), // Lower than last valid\n+            messageDetails: {\n+                agent: agents[0],\n+                message: Field(120000000001)\n+            }\n+        });\n+    \n+        const tx6 = await appChain.transaction(carrieMathison, () => {\n+            messages.processMessage(lowerNumberMessage);\n+        });\n+\n+        await tx6.sign();\n+        await tx6.send();\n+        const block = await appChain.produceBlock();\n+\n+        expect(block?.transactions[0].status.toBoolean()).toBe(false);\n+    });\n+\n+    it(\"Reject message from non-existent agent\", async () => {\n+        const nonExistentAgentMessage = new Message({\n+            messageNumber: Field(1),\n+            messageDetails: {\n+                agent: new Agent({\n+                    agentId: Field(999), // Non-existent agent ID\n+                    lastMessageNumber: Field(0),\n+                    securityCode: Field(10)\n+                }),\n+                message: Field(100000000001)\n+            }\n+        });\n+    \n+        const tx7 = await appChain.transaction(carrieMathison, () => {\n+            messages.processMessage(nonExistentAgentMessage);\n+        });\n+\n+        await tx7.sign();\n+        await tx7.send();\n+        const block = await appChain.produceBlock();\n+\n+        expect(block?.transactions[0].status.toBoolean()).toBe(false);\n+    });\n     \n })"
          }
     ],
     "2024-04-25": [
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-25T09:56:04Z",
               "message": "Update messages.ts",
               "sha": "63996445fbf7e6263ad55c258c5af7ffc7962532",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 2f19df7..cf419f7 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -40,7 +40,7 @@ export class Messages extends RuntimeModule<unknown>{\n \n     @runtimeMethod()\n     public initializeAgent(id: Field, agent: Agent) {\n-        \n+        this.existingAgents.set(id, agent);\n     }\n \n     @runtimeMethod()"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-25T11:05:05Z",
               "message": "populate agents for test",
               "sha": "1634411f4f1678b62d3cd2e3057be650d51e84ca",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex cf419f7..308713c 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -2,7 +2,7 @@ import { runtimeModule, state, runtimeMethod, Runtime, RuntimeModule } from \"@pr\n import { State, StateMap, assert } from \"@proto-kit/protocol\";\n import { Bool, Field, Struct } from \"o1js\";\n \n-class Agent extends Struct({\n+export class Agent extends Struct({\n     agentId: Field,\n     lastMessageNumber: Field,\n     securityCode: Field\n@@ -15,14 +15,14 @@ class Agent extends Struct({\n     }\n }\n \n-class MessageDetail extends Struct({\n+export class MessageDetail extends Struct({\n     agent: Agent,\n     message: Field,\n }) {\n     \n }\n \n-class Message extends Struct({\n+export class Message extends Struct({\n     messageNumber: Field,\n     messageDetails: MessageDetail\n }) {\n\n diff --git a/packages/chain/src/runtime.ts b/packages/chain/src/runtime.ts\nindex 46773be..99cac0c 100644\n--- a/packages/chain/src/runtime.ts\n+++ b/packages/chain/src/runtime.ts\n@@ -1,15 +1,18 @@\n import { Balance } from \"@proto-kit/library\";\n import { Balances } from \"./balances\";\n+import { Messages } from \"./messages\";\n import { ModulesConfig } from \"@proto-kit/common\";\n \n export const modules = {\n   Balances,\n+  Messages\n };\n \n export const config: ModulesConfig<typeof modules> = {\n   Balances: {\n     totalSupply: Balance.from(10_000),\n   },\n+  Messages: {}\n };\n \n export default {\n\n diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex c72b9f5..4eb915c 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -1,11 +1,13 @@\n import { TestingAppChain } from \"@proto-kit/sdk\";\n import { Field, PrivateKey, UInt64 } from \"o1js\";\n-import { Messages } from \"../src/messages\";\n+import { Messages, Agent } from \"../src/messages\";\n import { log } from \"@proto-kit/common\";\n \n log.setLevel(\"ERROR\");\n \n-describe(\"Mina Spy Chain Messages\", async () => {\n+\n+\n+describe(\"Mina Spy Chain Messages\", () => {\n     beforeAll(async () => {\n         const appChain = TestingAppChain.fromRuntime({\n             Messages,\n@@ -26,10 +28,22 @@ describe(\"Mina Spy Chain Messages\", async () => {\n         appChain.setSigner(carrieMathisonPrivateKey);\n \n         const messages = appChain.runtime.resolve(\"Messages\");\n+\n+        const agents: Agent[] = []\n+\n+        for (let i = 1; i <= 5; i++) {\n+            agents.push(new Agent({\n+                agentId: Field(i),\n+                lastMessageNumber: Field(0),\n+                securityCode: Field(i*10)\n+            }));\n+        }\n+\n+        console.log(agents)\n     })\n \n \n-    it(\"Lets see messages what happens\", async () => {\n+    it(\"Initialize Agent\", async () => {\n \n     })\n })"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-25T12:02:19Z",
               "message": "add test initialize agent",
               "sha": "894abfb9730f448cd0121a1eeb531a843ab04f08",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 308713c..8f7b549 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -36,7 +36,7 @@ export class Message extends Struct({\n \n @runtimeModule()\n export class Messages extends RuntimeModule<unknown>{\n-    @state() private existingAgents = StateMap.from(Field, Agent);\n+    @state() public existingAgents = StateMap.from(Field, Agent);\n \n     @runtimeMethod()\n     public initializeAgent(id: Field, agent: Agent) {\n\n diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex 4eb915c..d8f8105 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -1,4 +1,4 @@\n-import { TestingAppChain } from \"@proto-kit/sdk\";\n+import { AppChain, TestingAppChain } from \"@proto-kit/sdk\";\n import { Field, PrivateKey, UInt64 } from \"o1js\";\n import { Messages, Agent } from \"../src/messages\";\n import { log } from \"@proto-kit/common\";\n@@ -8,29 +8,34 @@ log.setLevel(\"ERROR\");\n \n \n describe(\"Mina Spy Chain Messages\", () => {\n-    beforeAll(async () => {\n-        const appChain = TestingAppChain.fromRuntime({\n-            Messages,\n-        });\n-        \n-        appChain.configurePartial({\n-            Runtime: {\n-              Messages: {},\n-              Balances: {totalSupply: UInt64.from(10000)},\n-            },\n-        });\n+    const appChain = TestingAppChain.fromRuntime({\n+        Messages,\n+    });\n     \n+    appChain.configurePartial({\n+        Runtime: {\n+            Messages: {},\n+            Balances: {totalSupply: UInt64.from(10000)},\n+        },\n+    });\n+\n+    let carrieMathison: any;\n+    let carrieMathisonPrivateKey: any;\n+    let messages: any;\n+    let agents: Agent[];\n+\n+    beforeAll(async () => {\n         await appChain.start();\n-    \n-        const carrieMathisonPrivateKey = PrivateKey.random();\n-        const carrieMathison = carrieMathisonPrivateKey.toPublicKey();\n \n+        carrieMathisonPrivateKey = PrivateKey.random();\n+        carrieMathison = carrieMathisonPrivateKey.toPublicKey();\n+    \n         appChain.setSigner(carrieMathisonPrivateKey);\n-\n-        const messages = appChain.runtime.resolve(\"Messages\");\n-\n-        const agents: Agent[] = []\n-\n+    \n+        messages = appChain.runtime.resolve(\"Messages\");\n+    \n+        agents = []\n+    \n         for (let i = 1; i <= 5; i++) {\n             agents.push(new Agent({\n                 agentId: Field(i),\n@@ -38,12 +43,19 @@ describe(\"Mina Spy Chain Messages\", () => {\n                 securityCode: Field(i*10)\n             }));\n         }\n-\n-        console.log(agents)\n     })\n+    \n+    it(\"Initialize Agent\", async () => {\n+        const tx1 = await appChain.transaction(carrieMathison, () => {\n+            messages.initializeAgent(agents[0].agentId, agents[0])\n+        })\n \n+        await tx1.sign();\n+        await tx1.send();\n \n-    it(\"Initialize Agent\", async () => {\n+        const block = await appChain.produceBlock();\n \n+        const agent = await appChain.query.runtime.Messages.existingAgents.get(agents[0].agentId)\n+        expect(agent).toBe(agents[0])\n     })\n })"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-25T12:05:40Z",
               "message": "Update messages.test.ts",
               "sha": "7a64fa69436e14dae14569bbb40b67a640b2a8c2",
               "branch": "main",
               "diff": "diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex d8f8105..5b9263d 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -6,7 +6,6 @@ import { log } from \"@proto-kit/common\";\n log.setLevel(\"ERROR\");\n \n \n-\n describe(\"Mina Spy Chain Messages\", () => {\n     const appChain = TestingAppChain.fromRuntime({\n         Messages,\n@@ -56,6 +55,8 @@ describe(\"Mina Spy Chain Messages\", () => {\n         const block = await appChain.produceBlock();\n \n         const agent = await appChain.query.runtime.Messages.existingAgents.get(agents[0].agentId)\n-        expect(agent).toBe(agents[0])\n+        expect(agent?.agentId).toEqual(agents[0].agentId);\n+        expect(agent?.lastMessageNumber).toEqual(agents[0].lastMessageNumber);\n+        expect(agent?.securityCode).toEqual(agents[0].securityCode);\n     })\n })"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-25T17:36:56Z",
               "message": "Update messages.test.ts",
               "sha": "37d106dadf01addb8181d5f63557e1b67fbc79b9",
               "branch": "main",
               "diff": "diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex 5b9263d..a6e69b1 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -1,6 +1,6 @@\n-import { AppChain, TestingAppChain } from \"@proto-kit/sdk\";\n+import { TestingAppChain } from \"@proto-kit/sdk\";\n import { Field, PrivateKey, UInt64 } from \"o1js\";\n-import { Messages, Agent } from \"../src/messages\";\n+import { Messages, Agent, Message, MessageDetail } from \"../src/messages\";\n import { log } from \"@proto-kit/common\";\n \n log.setLevel(\"ERROR\");\n@@ -52,11 +52,33 @@ describe(\"Mina Spy Chain Messages\", () => {\n         await tx1.sign();\n         await tx1.send();\n \n-        const block = await appChain.produceBlock();\n+        await appChain.produceBlock();\n \n         const agent = await appChain.query.runtime.Messages.existingAgents.get(agents[0].agentId)\n         expect(agent?.agentId).toEqual(agents[0].agentId);\n         expect(agent?.lastMessageNumber).toEqual(agents[0].lastMessageNumber);\n         expect(agent?.securityCode).toEqual(agents[0].securityCode);\n     })\n+\n+    it(\"Process a valid message\", async () => {\n+        const validMessage = new Message({\n+            messageNumber: Field(1),\n+            messageDetails: new MessageDetail({\n+                agent: agents[0],\n+                message: Field(100000000001)\n+            })\n+        });\n+    \n+        const tx2 = await appChain.transaction(carrieMathison, () => {\n+            messages.processMessage(validMessage);\n+        });\n+    \n+        await tx2.sign();\n+        await tx2.send();\n+        await appChain.produceBlock();\n+    \n+        const updatedAgent = await appChain.query.runtime.Messages.existingAgents.get(agents[0].agentId);\n+        expect(updatedAgent?.lastMessageNumber).toEqual(Field(1));\n+    });\n+    \n })"
          }
     ],
     "2024-04-24": [
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-24T09:52:56Z",
               "message": "add tests and init",
               "sha": "102b7775f8c8fb39f8bd17edd6f434569a36ad6f",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex dd60973..2f19df7 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -38,6 +38,11 @@ class Message extends Struct({\n export class Messages extends RuntimeModule<unknown>{\n     @state() private existingAgents = StateMap.from(Field, Agent);\n \n+    @runtimeMethod()\n+    public initializeAgent(id: Field, agent: Agent) {\n+        \n+    }\n+\n     @runtimeMethod()\n     public processMessage(message: Message): any {\n         // Ensure The AgentID exists in the system\n\n diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nindex e69de29..c72b9f5 100644\n--- a/packages/chain/test/messages.test.ts\n+++ b/packages/chain/test/messages.test.ts\n@@ -0,0 +1,35 @@\n+import { TestingAppChain } from \"@proto-kit/sdk\";\n+import { Field, PrivateKey, UInt64 } from \"o1js\";\n+import { Messages } from \"../src/messages\";\n+import { log } from \"@proto-kit/common\";\n+\n+log.setLevel(\"ERROR\");\n+\n+describe(\"Mina Spy Chain Messages\", async () => {\n+    beforeAll(async () => {\n+        const appChain = TestingAppChain.fromRuntime({\n+            Messages,\n+        });\n+        \n+        appChain.configurePartial({\n+            Runtime: {\n+              Messages: {},\n+              Balances: {totalSupply: UInt64.from(10000)},\n+            },\n+        });\n+    \n+        await appChain.start();\n+    \n+        const carrieMathisonPrivateKey = PrivateKey.random();\n+        const carrieMathison = carrieMathisonPrivateKey.toPublicKey();\n+\n+        appChain.setSigner(carrieMathisonPrivateKey);\n+\n+        const messages = appChain.runtime.resolve(\"Messages\");\n+    })\n+\n+\n+    it(\"Lets see messages what happens\", async () => {\n+\n+    })\n+})"
          }
     ],
     "2024-04-23": [
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-23T11:13:04Z",
               "message": "Update messages.ts",
               "sha": "656f4305763c0c91d5916ec16ca0d8ba1c166099",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 7b604e2..8ba7537 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -1,17 +1,13 @@\n import { runtimeModule, state, runtimeMethod, Runtime, RuntimeModule } from \"@proto-kit/module\";\n-import { State, assert } from \"@proto-kit/protocol\";\n+import { State, StateMap, assert } from \"@proto-kit/protocol\";\n import { Bool, Field, Struct } from \"o1js\";\n \n class Agent extends Struct({\n     agentId: Field,\n+    lastMessageNumber: Field,\n     securityCode: Field\n }) {\n-    static createAgent(agentId: Field, securityCode: Field): Agent {\n-        return new Agent({\n-            agentId: Field(agentId),\n-            securityCode: Field(securityCode)\n-        });\n-    }\n+    \n }\n \n class MessageDetail extends Struct({\n@@ -30,5 +26,18 @@ class Message extends Struct({\n \n @runtimeModule()\n export class Messages extends RuntimeModule<unknown>{\n-    @state() public messageNumber = State.from()\n+    @state() private existingAgents = StateMap.from(Field, Agent);\n+\n+    @runtimeMethod()\n+    public processMessage(message: Message): any {\n+\n+        // Ensure The AgentID exists in the system\n+        const agent = message.messageDetails.agent;\n+        assert(this.existingAgents.get(agent.agentId).isSome);\n+\n+        // The security code matches that held for that AgentID\n+        const messageSecurityCode = agent.securityCode;\n+        assert(this.existingAgents.get(agent.agentId).value.securityCode.equals(messageSecurityCode));\n+        \n+    }\n }\n\\ No newline at end of file"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-23T11:32:20Z",
               "message": "Update messages.ts",
               "sha": "f9627907b66b2dee4e4d77119b3afb7cba222854",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 8ba7537..5e20047 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -30,7 +30,6 @@ export class Messages extends RuntimeModule<unknown>{\n \n     @runtimeMethod()\n     public processMessage(message: Message): any {\n-\n         // Ensure The AgentID exists in the system\n         const agent = message.messageDetails.agent;\n         assert(this.existingAgents.get(agent.agentId).isSome);\n@@ -38,6 +37,8 @@ export class Messages extends RuntimeModule<unknown>{\n         // The security code matches that held for that AgentID\n         const messageSecurityCode = agent.securityCode;\n         assert(this.existingAgents.get(agent.agentId).value.securityCode.equals(messageSecurityCode));\n+\n+\n         \n     }\n }\n\\ No newline at end of file"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-23T11:51:26Z",
               "message": "add restrictions",
               "sha": "f83b24d7ca99295eb99ddb80e389ed672f61f639",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 5e20047..0c96975 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -7,7 +7,10 @@ class Agent extends Struct({\n     lastMessageNumber: Field,\n     securityCode: Field\n }) {\n-    \n+    public isValid(): void {\n+        this.securityCode.assertLessThan(100)\n+        this.securityCode.assertGreaterThan(9)\n+    }\n }\n \n class MessageDetail extends Struct({\n@@ -21,7 +24,10 @@ class Message extends Struct({\n     messageNumber: Field,\n     messageDetails: MessageDetail\n }) {\n-\n+    public isValid(): void {\n+        this.messageDetails.message.assertGreaterThan(99999999999)\n+        this.messageDetails.message.assertLessThan(1000000000000)\n+    }\n }\n \n @runtimeModule()"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-23T12:11:25Z",
               "message": "add assertions fix isValids",
               "sha": "0494746bcc75d99d8975d939708a0f92f472e43a",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 0c96975..900dceb 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -7,9 +7,11 @@ class Agent extends Struct({\n     lastMessageNumber: Field,\n     securityCode: Field\n }) {\n-    public isValid(): void {\n-        this.securityCode.assertLessThan(100)\n-        this.securityCode.assertGreaterThan(9)\n+    public isValid(): Bool {\n+        const a = this.securityCode.lessThan(100)\n+        const b = this.securityCode.greaterThan(9)\n+\n+        return a.and(b)\n     }\n }\n \n@@ -24,9 +26,11 @@ class Message extends Struct({\n     messageNumber: Field,\n     messageDetails: MessageDetail\n }) {\n-    public isValid(): void {\n-        this.messageDetails.message.assertGreaterThan(99999999999)\n-        this.messageDetails.message.assertLessThan(1000000000000)\n+    public isValid(): Bool {\n+        const a = this.messageDetails.message.greaterThan(99999999999)\n+        const b = this.messageDetails.message.lessThan(1000000000000)\n+\n+        return a.and(b)\n     }\n }\n \n@@ -44,7 +48,8 @@ export class Messages extends RuntimeModule<unknown>{\n         const messageSecurityCode = agent.securityCode;\n         assert(this.existingAgents.get(agent.agentId).value.securityCode.equals(messageSecurityCode));\n \n-\n-        \n+        // The message is of the correct length. & Security Code is a 2 Character code\n+        assert(message.isValid())\n+        assert(message.messageDetails.agent.isValid())\n     }\n }\n\\ No newline at end of file"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-23T12:33:22Z",
               "message": "Update messages.ts",
               "sha": "6e9ff3bd0b005a69ed3cf8fac26921e3424b5da8",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex 900dceb..e53ae1d 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -51,5 +51,9 @@ export class Messages extends RuntimeModule<unknown>{\n         // The message is of the correct length. & Security Code is a 2 Character code\n         assert(message.isValid())\n         assert(message.messageDetails.agent.isValid())\n+\n+        // The message number is greater than the highest so far for that agent.\n+        const messageNumber = message.messageNumber\n+        assert(this.existingAgents.get(agent.agentId).value.lastMessageNumber.lessThan(messageNumber))\n     }\n }\n\\ No newline at end of file"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-23T12:37:29Z",
               "message": "Update messages.ts",
               "sha": "f153c9ab39243df01e04fb7f7889530ad45fde98",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nindex e53ae1d..dd60973 100644\n--- a/packages/chain/src/messages.ts\n+++ b/packages/chain/src/messages.ts\n@@ -49,11 +49,14 @@ export class Messages extends RuntimeModule<unknown>{\n         assert(this.existingAgents.get(agent.agentId).value.securityCode.equals(messageSecurityCode));\n \n         // The message is of the correct length. & Security Code is a 2 Character code\n-        assert(message.isValid())\n-        assert(message.messageDetails.agent.isValid())\n+        assert(message.isValid());\n+        assert(message.messageDetails.agent.isValid());\n \n         // The message number is greater than the highest so far for that agent.\n-        const messageNumber = message.messageNumber\n-        assert(this.existingAgents.get(agent.agentId).value.lastMessageNumber.lessThan(messageNumber))\n+        const messageNumber = message.messageNumber;\n+        assert(this.existingAgents.get(agent.agentId).value.lastMessageNumber.lessThan(messageNumber));\n+\n+        // You should update the agent state to store the last message number received\n+        this.existingAgents.get(agent.agentId).value.lastMessageNumber = messageNumber;\n     }\n }\n\\ No newline at end of file"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-23T12:40:21Z",
               "message": "Create messages.test.ts",
               "sha": "653424f170f2ce60241981026530bce7adaa2b6d",
               "branch": "main",
               "diff": "diff --git a/packages/chain/test/messages.test.ts b/packages/chain/test/messages.test.ts\nnew file mode 100644\nindex 0000000..e69de29"
          }
     ],
     "2024-04-22": [
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-22T12:02:44Z",
               "message": "Create messages.ts",
               "sha": "6a2001ff663fe78f1b38f108514217bd047b1aa3",
               "branch": "main",
               "diff": "diff --git a/packages/chain/src/messages.ts b/packages/chain/src/messages.ts\nnew file mode 100644\nindex 0000000..7b604e2\n--- /dev/null\n+++ b/packages/chain/src/messages.ts\n@@ -0,0 +1,34 @@\n+import { runtimeModule, state, runtimeMethod, Runtime, RuntimeModule } from \"@proto-kit/module\";\n+import { State, assert } from \"@proto-kit/protocol\";\n+import { Bool, Field, Struct } from \"o1js\";\n+\n+class Agent extends Struct({\n+    agentId: Field,\n+    securityCode: Field\n+}) {\n+    static createAgent(agentId: Field, securityCode: Field): Agent {\n+        return new Agent({\n+            agentId: Field(agentId),\n+            securityCode: Field(securityCode)\n+        });\n+    }\n+}\n+\n+class MessageDetail extends Struct({\n+    agent: Agent,\n+    message: Field,\n+}) {\n+    \n+}\n+\n+class Message extends Struct({\n+    messageNumber: Field,\n+    messageDetails: MessageDetail\n+}) {\n+\n+}\n+\n+@runtimeModule()\n+export class Messages extends RuntimeModule<unknown>{\n+    @state() public messageNumber = State.from()\n+}\n\\ No newline at end of file"
          }
     ],
     "2024-04-01": [
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-01T06:23:08Z",
               "message": "Initial commit",
               "sha": "ee4254bd156b4ff7135981f3df41f743e8c25aee",
               "branch": "main",
               "diff": "diff --git a/.gitattributes b/.gitattributes\nnew file mode 100644\nindex 0000000..dfe0770\n--- /dev/null\n+++ b/.gitattributes\n@@ -0,0 +1,2 @@\n+# Auto detect text files and perform LF normalization\n+* text=auto"
          },
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-01T06:26:09Z",
               "message": "initial",
               "sha": "1a124e2a73083f1f8cd7e34e22e251348c18aa29",
               "branch": "main",
               "diff": ""
          }
     ],
     "2024-04-27": [
          {
               "repo": "berkingurcan/mina-spy-chain",
               "author": "berkingurcan",
               "username": "berkingurcan",
               "date": "2024-04-27T10:00:59Z",
               "message": "add privMes",
               "sha": "40ae6a483f84b03300307378d227ef77e0dcf7b8",
               "branch": "challenge-4",
               "diff": "diff --git a/packages/chain/src/privateMessages.ts b/packages/chain/src/privateMessages.ts\nnew file mode 100644\nindex 0000000..3999ca7\n--- /dev/null\n+++ b/packages/chain/src/privateMessages.ts\n@@ -0,0 +1,77 @@\n+import { runtimeModule, state, runtimeMethod, Runtime, RuntimeModule } from \"@proto-kit/module\";\n+import { State, StateMap, assert } from \"@proto-kit/protocol\";\n+import { Bool, Field, Struct } from \"o1js\";\n+\n+export class Agent extends Struct({\n+    agentId: Field,\n+    lastMessageNumber: Field,\n+    securityCode: Field\n+}) {\n+    public isValid(): Bool {\n+        const a = this.securityCode.lessThan(100)\n+        const b = this.securityCode.greaterThan(9)\n+\n+        return a.and(b)\n+    }\n+\n+    public updateMessageNumber(n: Field): void {\n+        this.lastMessageNumber = n;\n+    }\n+}\n+\n+export class MessageDetail extends Struct({\n+    agent: Agent,\n+    message: Field,\n+}) {\n+    \n+}\n+\n+export class Message extends Struct({\n+    messageNumber: Field,\n+    messageDetails: MessageDetail\n+}) {\n+    public isValid(): Bool {\n+        const a = this.messageDetails.message.greaterThan(99999999999)\n+        const b = this.messageDetails.message.lessThan(1000000000000)\n+\n+        return a.and(b)\n+    }\n+}\n+\n+@runtimeModule()\n+export class PrivateMessages extends RuntimeModule<unknown>{\n+    @state() public existingAgents = StateMap.from(Field, Agent);\n+\n+    @runtimeMethod()\n+    public initializeAgent(id: Field, agent: Agent) {\n+        this.existingAgents.set(id, agent);\n+    }\n+\n+    @runtimeMethod()\n+    public processMessage(message: Message): any {\n+        // Ensure The AgentID exists in the system\n+        const agent = message.messageDetails.agent;\n+        assert(this.existingAgents.get(agent.agentId).isSome, \"AGENT IS NOT EXISTS\");\n+\n+        // The security code matches that held for that AgentID\n+        const messageSecurityCode = agent.securityCode;\n+        assert(this.existingAgents.get(agent.agentId).value.securityCode.equals(messageSecurityCode), \"INVALID SECURITY CODE!\");\n+\n+        // The message is of the correct length. & Security Code is a 2 Character code\n+        assert(message.isValid());\n+        assert(message.messageDetails.agent.isValid());\n+\n+        // The message number is greater than the highest so far for that agent.\n+        const messageNumber = message.messageNumber;\n+        assert(this.existingAgents.get(agent.agentId).value.lastMessageNumber.lessThan(messageNumber));\n+\n+        // You should update the agent state to store the last message number received\n+        const updatedAgent = new Agent({\n+            agentId: agent.agentId,\n+            lastMessageNumber: messageNumber,\n+            securityCode: messageSecurityCode\n+        })\n+\n+        this.existingAgents.set(agent.agentId, updatedAgent)\n+    }\n+}\n\\ No newline at end of file\n\n diff --git a/packages/chain/src/runtime.ts b/packages/chain/src/runtime.ts\nindex 99cac0c..1b04c47 100644\n--- a/packages/chain/src/runtime.ts\n+++ b/packages/chain/src/runtime.ts\n@@ -1,18 +1,21 @@\n import { Balance } from \"@proto-kit/library\";\n import { Balances } from \"./balances\";\n import { Messages } from \"./messages\";\n+import { PrivateMessages } from \"./privateMessages\";\n import { ModulesConfig } from \"@proto-kit/common\";\n \n export const modules = {\n   Balances,\n-  Messages\n+  Messages,\n+  PrivateMessages\n };\n \n export const config: ModulesConfig<typeof modules> = {\n   Balances: {\n     totalSupply: Balance.from(10_000),\n   },\n-  Messages: {}\n+  Messages: {},\n+  PrivateMessages: {}\n };\n \n export default {\n\n diff --git a/packages/chain/test/privateMessages.test.ts b/packages/chain/test/privateMessages.test.ts\nnew file mode 100644\nindex 0000000..e69de29"
          }
     ]
}